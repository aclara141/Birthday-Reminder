import unittest
from datetime import time
from unittest.mock import patch

from app import Authorization, EmailNotification, ReminderSystem, SMSNotification, User



class TestReminderSystem(unittest.TestCase):
    def setUp(self):
        self.system = ReminderSystem()
        self.auth = Authorization()

        self.user1 = User("Alice", "alice@example.com", "password1")
        self.system.users[self.user1.email] = self.user1

        self.user2 = User("Bob", "bob@example.com", "password2")
        self.system.users[self.user2.email] = self.user2

        self.user1.add_birthday("Alice's Birthday", "04-27")
        self.user2.add_birthday("Bob's Birthday", "05-01")

        self.email_service = EmailNotification()

    def test_login_successful(self):
        with patch("builtins.print") as mock_print:
            self.auth.login("alice@example.com", "password1")
            mock_print.assert_called_once_with("Logged in as Alice")

    def test_login_invalid_credentials(self):
        with patch("builtins.print") as mock_print:
            self.auth.login("alice@example.com", "wrong_password")
            mock_print.assert_called_once_with("Invalid email or password")

    def test_add_birthday(self):
        self.assertEqual(len(self.user1.reminder.birthdays), 1)
        self.user1.add_birthday("New Birthday", "01-01")
        self.assertEqual(len(self.user1.reminder.birthdays), 2)

    def test_remove_birthday(self):
        self.assertEqual(len(self.user2.reminder.birthdays), 1)
        self.user2.remove_birthday("Bob's Birthday")
        self.assertEqual(len(self.user2.reminder.birthdays), 0)

    def test_send_notification_email(self):
        with patch("builtins.print") as mock_print:
            self.user1.send_notification("Your birthday is in two weeks")
            mock_print.assert_called_once_with("Email notification sent: Your birthday is in two weeks")

    def test_send_notification_sms(self):
        self.user2.reminder.send_notifications = SMSNotification().send_notification
        with patch("builtins.print") as mock_print:
            self.user2.send_notification("Your birthday is in two weeks")
            mock_print.assert_called_once_with("SMS notification sent: Your birthday is in two weeks")

if __name__ == "__main__":
    unittest.main()

